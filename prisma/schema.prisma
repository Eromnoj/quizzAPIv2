// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      Role       @default(USER)
  Recovery  Recovery[]
}

model Recovery {
  id        String   @id @default(cuid())
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Quizzes   Quiz[]
}

enum Difficulty {
  facile
  difficile
  normal
}

model Quiz {
  id         String    @id @default(cuid())
  question   String
  answer     String
  badAnswer1 String
  badAnswer2 String
  badAnswer3 String
  difficulty Difficulty
  pending    Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  reports   QuizReport[]
}


model QuizReport {
  id        String   @id @default(cuid())
  reason    String   @db.Text
  createdAt DateTime @default(now())
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])

  @@index([quizId])
}
